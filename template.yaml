AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'externals.io'

Resources:
    Website:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: 'externals-website'
            Description: 'externals.io website'
            CodeUri: .
            Handler: web/index.php
            Timeout: 30 # in seconds (API Gateway has a timeout of 30 seconds)
            MemorySize: 1024 # The memory size is related to the pricing and CPU power
            Runtime: provided
            Layers:
                - 'arn:aws:lambda:eu-west-1:209497400698:layer:php-73-fpm:2'
            Events:
                # The function will match all HTTP URLs
                HttpRoot:
                    Type: Api
                    Properties:
                        Path: /
                        Method: ANY
                HttpSubPaths:
                    Type: Api
                    Properties:
                        Path: /{proxy+}
                        Method: ANY
            VpcConfig:
                SecurityGroupIds:
                    - sg-09379891e319fda27
                SubnetIds:
                    - subnet-6dda0d06
                    - subnet-6fda0d04
                    - subnet-6eda0d05
            Policies:
                - AWSLambdaVPCAccessExecutionRole # Allows the lambda to access the VPC

    Console:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: 'externals-console'
            Description: 'externals.io console'
            CodeUri: .
            Handler: console
            Timeout: 300 # in seconds
            MemorySize: 1024 # The memory size is related to the pricing and CPU power
            Runtime: provided
            Layers:
                # PHP runtime
                - 'arn:aws:lambda:eu-west-1:209497400698:layer:php-73:2'
                # Console layer
                - 'arn:aws:lambda:eu-west-1:209497400698:layer:console:2'
            VpcConfig:
                SecurityGroupIds:
                    - sg-09379891e319fda27
                SubnetIds:
                    - subnet-6dda0d06
                    - subnet-6fda0d04
                    - subnet-6eda0d05
            Policies:
                - AWSLambdaVPCAccessExecutionRole # Allows the lambda to access the VPC

    # The S3 bucket that stores the assets
    Assets:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: externals-assets
            # Enables static website hosting
            WebsiteConfiguration:
                IndexDocument: index.html # Use index.html as the root file
    # The policy that makes the bucket publicly readable (necessary for a public website)
    AssetsBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref Assets
            PolicyDocument:
                Statement:
                    -   Effect: 'Allow'
                        Principal: '*' # everyone
                        Action: 's3:GetObject' # to read
                        Resource: !Sub '${Assets.Arn}/*' # things in the bucket

    # We use CloudFront in front of API Gateway to be able to redirect HTTP to HTTPS
    # because API Gateway does not listen at all to HTTP requests.
    WebsiteCDN:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
                PriceClass: PriceClass_100
                # Origins are where CloudFront fetches content
                Origins:
                    # The website (AWS Lambda)
                    -   Id: Website
                        DomainName: !Sub '${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com'
                        OriginPath: '/Prod'
                        CustomOriginConfig:
                            OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
                    # The assets (S3)
                    -   Id: Assets
                        # Watch out, use s3-website URL (https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757)
                        DomainName: !Sub '${Assets}.s3-website-${AWS::Region}.amazonaws.com'
                        CustomOriginConfig:
                            OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
                # The default behavior is to send everything to AWS Lambda
                DefaultCacheBehavior:
                    AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
                    TargetOriginId: Website # the PHP application
                    # Disable caching for the PHP application
                    DefaultTTL: 0
                    MinTTL: 0
                    MaxTTL: 0
                    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
                    ForwardedValues:
                        QueryString: true
                        # We must *not* forward the `Host` header else it messes up API Gateway
                        Headers:
                            - 'Accept'
                            - 'Accept-Language'
                            - 'Origin'
                            - 'Referer'
                    ViewerProtocolPolicy: redirect-to-https
                CacheBehaviors:
                    # Assets will be served under the `/assets/` prefix
                    -   PathPattern: 'assets/*'
                        TargetOriginId: Assets # the static files on S3
                        AllowedMethods: [GET, HEAD]
                        ForwardedValues:
                            # No need for all that with assets
                            QueryString: 'false'
                            Cookies:
                                Forward: none
                        ViewerProtocolPolicy: redirect-to-https
                        Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
                # Custom domain name
                Aliases:
                    - v2.externals.io
                ViewerCertificate:
                    # ARN of the certificate created in ACM
                    AcmCertificateArn: arn:aws:acm:us-east-1:416566615250:certificate/807df63b-c1be-464b-8b8e-a1d3d2d661bb
                    # See https://docs.aws.amazon.com/fr_fr/cloudfront/latest/APIReference/API_ViewerCertificate.html
                    SslSupportMethod: 'sni-only'

# Outputs show up in the CloudFormation dashboard
Outputs:
    DemoHttpApi:
        Description: 'URL of our function in the *Prod* environment'
        Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
